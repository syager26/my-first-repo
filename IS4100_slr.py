# -*- coding: utf-8 -*-
"""IS4100_SLR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uGOqN-jjDrjReokiEa-8W4mH6JEzn-Vi

# IS-4100: Simple Linear Regression (SLR) Assignment

In this assignment, you will explore the relationship between two variables using simple linear regression. You'll work with each of your eight team's data over the last year or two. You can pick any two variables you are interested in comparing. By the end of this assignment, you'll be able to:

1. Load and preprocess NFL data.
2. Perform exploratory data analysis (EDA) to understand the dataset.
3. Build and evaluate simple linear regression models.
4. Interpret the results and draw conclusions.

Be sure to submit notebook with all code cells executed or it'll be an automatic 0.

## Part 1: Environment Setup
"""

# install packages
install.packages('tidyverse')
install.packages('nflfastR')

install.packages('gridExtra')

# load packages
library(tidyverse)
library(nflfastR)
library(gridExtra)
library(nflreadr)

options(repr.plot.width = 20, repr.plot.height = 10)

"""## Part 2: EDA

### Rushing Analysis
"""

# load in data
pbp <- load_pbp(2018:2024)

# 2021 - 2023 pbp data
pbp_old <- pbp |>
  filter(season < 2024 & season > 2019)

# list of my teams' abbreviations
my_teams <- c('BAL', 'NYJ', 'JAX', 'DAL','LV', 'LA', 'CAR', 'DET')

# filter to my teams
pbp_my_teams <- pbp |> filter(home_team %in% my_teams | away_team %in% my_teams) |>
  filter(season == 2024)

# get offensive data for my teams

# rushing data
pbp_my_teams_run <- pbp_my_teams |> filter(posteam %in% my_teams) |>
  filter(play_type == 'run' & !is.na(rusher_id)) |>
  mutate(rushing_yards = ifelse(is.na(rushing_yards),0, rushing_yards))

# passing data
pbp_my_teams_pass <- pbp_my_teams |> filter(posteam %in% my_teams) |>
  filter(play_type == 'pass' & !is.na(passer_id)) |>
  mutate(passing_yards = ifelse(is.na(passing_yards),0, passing_yards))

# add column my_team (1 if in my teams, 0 if not)
pbp_cur <- pbp |>
  filter(season == 2024) |>
    mutate(my_team = ifelse(posteam %in% my_teams,1,0))

# rush and pass data for 2024
pbp_cur_run <- pbp_cur |>
  filter(play_type == 'run' & !is.na(rusher_id)) |>
  mutate(rushing_yards = ifelse(is.na(rushing_yards),0, rushing_yards))

pbp_cur_pass <- pbp_cur |>
  filter(play_type == 'pass' & !is.na(passer_id)) |>
  mutate(passing_yards = ifelse(is.na(passing_yards),0, passing_yards))

# plot all rush and pass data colored by whether or not they are my team
plot1 <- ggplot(pbp_cur_run,
  aes(x = ydstogo, y = rushing_yards, color = my_team)) +
    geom_point() +
    theme_dark() +
    xlab("Yards to Go") +
    ylab("Rushing Yards") +
    theme(legend.position = 'none', plot.title = element_text(hjust = 0.5)) +
    ggtitle("Rushing Yards vs. Yards to Go")

plot2 <- ggplot(pbp_cur_pass,
    aes(x = ydstogo, y = passing_yards, color = my_team)) +
      geom_point() +
      theme_dark() +
      xlab("Yards to Go") +
    ylab("Passing Yards") +
      theme(legend.position = 'none', plot.title = element_text(hjust = 0.5)) +
      ggtitle("Passing Yards vs. Yards to Go")

grid.arrange(plot1, plot2, ncol = 2)

# plot yards per rush and yards per game, colored by whether or not they are my team
run_summary <- pbp_cur_run |>
  group_by(posteam) |>
  summarize(
    games = n_distinct(game_id),
    attempts = n(),
    attempts_per_game = (attempts/games),
    rush_yds_total = sum(rushing_yards),
    rush_yds_per_game = (rush_yds_total/games),
    yards_per_rush = mean(rushing_yards),
    my_team = ifelse(any(my_team == 1), "yes","no")
  ) |>
    arrange(-yards_per_rush)

# yards per rush
ypr <- ggplot(run_summary,
  aes(x = posteam, y = yards_per_rush, fill = my_team)) +
    geom_bar(stat = "identity") +
    geom_hline(yintercept = 4, linetype = 'dashed', color = 'cadetblue') +
    theme_minimal()

# rush yards per game
rpg <- ggplot(run_summary,
  aes(x = posteam, y = rush_yds_per_game, fill = my_team)) +
    geom_bar(stat = "identity") +
    geom_hline(yintercept = 100, linetype = 'dashed', color = 'cadetblue') +
    theme_minimal()

grid.arrange(ypr, rpg, ncol = 2)

# Run data - My Teams
run_summary |>
  filter(my_team == "yes") |>
    arrange(-rush_yds_per_game)

"""### Passing Analysis"""

# create passing summary
pass_summary <- pbp_cur_pass |>
  group_by(posteam) |>
  summarize(
  attempts = n(),
  games = n_distinct(game_id),
  attempts_per_game = (attempts/games),
  pass_yds_total = sum(passing_yards),
  pass_yds_per_game = (pass_yds_total/games),
  yards_per_pass = mean(passing_yards),
  my_team = ifelse(any(my_team) == 1, "yes", "no")
  )

# bar chart of yards/pass and pass yds/game

# yards/pass
ypp <- ggplot(pass_summary,
  aes(x = posteam, y = yards_per_pass, fill = my_team)) +
    geom_bar(stat = "identity") +
    geom_hline(yintercept = 6, linetype = 'dashed', color = 'cadetblue') +
    theme_minimal()

# pass yds/game
pyg <- ggplot(pass_summary,
  aes(x = posteam, y = pass_yds_per_game, fill = my_team)) +
    geom_bar(stat = "identity") +
    geom_hline(yintercept = 200, linetype = 'dashed', color = 'cadetblue') +
    theme_minimal()

grid.arrange(ypp, pyg, ncol = 2)

# Pass Data - My Teams
pass_summary |>
  filter(my_team == "yes") |>
  arrange(-yards_per_pass)

"""### Defensive Data"""

# season data
season_data <- load_schedules(seasons = 2024)

# filter for my teams
season_data_my_teams <- season_data |>
  filter(home_team %in% my_teams | away_team %in% my_teams) |>
  drop_na(home_score)

# get wins, losses, pts, pts against, rush_against, pass_against, rush_attempts, pass_attempts
games <- c()
wins <- c()
losses <- c()
points <- c()
points_against <- c()
rush_against <- c()
rush_attempts_against <- c()
pass_against <- c()
pass_attempts_against <- c()

for (team in my_teams) {

  # drop na values and filter to current team
  cur_team_games <- season_data_my_teams |>
    drop_na(home_score) |>
    filter(home_team == team | away_team == team)

  # get wins
  ws <- sum((cur_team_games$home_team == team & (cur_team_games$home_score > cur_team_games$away_score) | cur_team_games$away_team == team & (cur_team_games$away_score > cur_team_games$home_score)))

  # get losses
  ls <- sum((cur_team_games$home_team == team & (cur_team_games$home_score < cur_team_games$away_score) | cur_team_games$away_team == team & (cur_team_games$away_score < cur_team_games$home_score)))

  # get games
  gms = ws + ls

  # get points scored
  pts <- sum(ifelse(cur_team_games$home_team == team, cur_team_games$home_score, cur_team_games$away_score))

  # get points against
  pts_ag <- sum(ifelse(cur_team_games$home_team == team, cur_team_games$away_score, cur_team_games$home_score))

  # append to lists
  games <- c(games, gms)
  wins <- c(wins, ws)
  losses <- c(losses, ls)
  points <- c(points, pts)
  points_against <- c(points_against, pts_ag)

}

defensive_data <- data.frame(my_teams, games, wins, losses, points, points_against)

# add ppg, papg, avg_pt_diff
defensive_data <- defensive_data |>
  mutate(
  ppg = points/games,
  papg = points_against/games,
  avg_pt_diff = (points - points_against)/games
  )

# view defensive data
defensive_data

# get pass, rush, and total yards allowed
pass_yds_allowed <- c()
rush_yds_allowed <- c()
total_yds_allowed <- c()

# pass yards allowed
for (team in my_teams){

  games_list <- pbp_cur_pass |>
    filter(
      home_team == team | away_team == team,
      posteam != team
    )

  pya <- sum(games_list$passing_yards)

  pass_yds_allowed <- c(pass_yds_allowed, pya)
}

# rush yards allowed
for (team in my_teams){

  games_list <- pbp_cur_run |>
    filter(
      home_team == team | away_team == team,
      posteam != team
    )

  rya <- sum(games_list$rushing_yards)

  rush_yds_allowed <- c(rush_yds_allowed, rya)
}

defensive_data$pass_yds_allowed <- pass_yds_allowed
defensive_data$rush_yds_allowed <- rush_yds_allowed
defensive_data$total_yds_allowed <- (pass_yds_allowed + rush_yds_allowed)

# add rya_per_game and pya_per_game
defensive_data <- defensive_data |>
  mutate(
    rya_per_game = rush_yds_allowed/games,
    pya_per_game = pass_yds_allowed/games,
    ya_per_game = total_yds_allowed/games
  )

defensive_data |>
  arrange(-ppg)

# plot rush yards allowed , pass yards allowed, and point diff
ggplot(defensive_data, aes(x = rya_per_game, pya_per_game, color = avg_pt_diff)) +
  geom_point(size = 5) +
  theme_dark() +
  labs(title = "Yards Allowed & Point Differential", x = "Rush Yards Allowed", y = "Pass Yards Allowed")

"""## Part 3: Build SLR Models"""

# plot yards after catch based on air_yards
plot1 <- pbp_cur_pass |>
  mutate(
      yards_after_catch = ifelse(is.na(yards_after_catch),0,yards_after_catch),
      air_yards = ifelse(is.na(air_yards),0,air_yards)
  ) |>
  ggplot() +
  aes(x = air_yards, y = yards_after_catch) +
  geom_point() +
  geom_smooth(method = 'lm') +
  theme_dark()

plot1

# bin data

pbp_cur_pass <- pbp_cur_pass |>
  mutate(
      yards_after_catch = ifelse(is.na(yards_after_catch),0,yards_after_catch),
      air_yards = ifelse(is.na(air_yards),0,air_yards)
  )

pbp_yac_avg <- pbp_cur_pass |>
  group_by(air_yards) |>
  summarize(avg_yac = mean(yards_after_catch))

# plot binned data
ggplot(pbp_yac_avg, aes(x = air_yards, y = avg_yac)) +
  geom_point() +
    theme_light() +
    geom_smooth(method = 'lm', color = 'red') +
    labs(x = "Air Yards", y = "Average Yards After Catch")

# build and fit linear model

yac_model <- lm(yards_after_catch ~ 1 + air_yards, data = pbp_cur_pass)

summary(yac_model)

# save residuals as yacoe

pbp_cur_pass <- pbp_cur_pass |>
  mutate(
  yacoe = resid(yac_model)
  )

# tibble for yacoe, total yac, and yac per catch

yacoe_data_team <- pbp_cur_pass |>
  group_by(posteam) |>
  summarize(
  attempts = n(),
  yacoe_total = sum(yacoe),
  avg_yacoe = mean(yacoe),
  yac_total = sum(yards_after_catch),
  avg_yac = mean(yards_after_catch),
  avg_air_yards = mean(air_yards),
  my_team = ifelse(any(posteam %in% my_teams), "yes", "no")
  ) |>
    arrange(-avg_yacoe)

yacoe_data_player <- pbp_cur_pass |>
  group_by(posteam, receiver_player_id, receiver_player_name) |>
  drop_na(receiver_player_id) |>
  summarize(
  attempts = n(),
  yacoe_total = sum(yacoe),
  avg_yacoe = mean(yacoe),
  yac_total = sum(yards_after_catch),
  avg_yac = mean(yards_after_catch),
  avg_air_yards = mean(air_yards),
  my_team = ifelse(any(posteam %in% my_teams), "yes", "no")
  ) |>
    arrange(-avg_yacoe)

# look at team data
print(yacoe_data_team)

# look at player data
yacoe_data_player

# just my teams
yacoe_data_team |>
  filter(my_team == "yes")

# just my teams - players
yacoe_data_player |>
  filter(my_team == 'yes')

# plot average air yards and avg yac
ggplot(yacoe_data_team, aes(x = avg_air_yards, y = avg_yac, color = my_team)) +
  geom_point(size = 3) +
  theme_gray() +
  geom_smooth(method = 'lm') +
  labs(title = "Average Air Yards vs. Average YAC", x = "Average Air Yards", y = "Average YAC")

# plot average air yards vs. average yac colored by number of attempts
ggplot(yacoe_data_player, aes(x = avg_air_yards, y = avg_yac, color = attempts)) +
  geom_point(size = 3) +
  scale_color_gradient2(low = "bisque", mid = "coral1", high = "cornflowerblue", midpoint = 10) +
  theme_bw() +
  geom_smooth(method = 'lm')

"""### SLM for Each Team"""

# get week 3 opponents for my teams
opponent_week_3 <- c()

my_teams_wk_3 <- season_data |>
  filter((home_team %in% my_teams | away_team %in% my_teams) & week == 3)

for (team in my_teams){
  for (i in 1:nrow(my_teams_wk_3)){
    game <- my_teams_wk_3[i,]
    if (game$home_team == team){
      opp <- game$away_team
    } else if (game$away_team == team){
      opp <- game$home_team
    }
  }
  opponent_week_3 <- c(opponent_week_3, opp)
}

print(opponent_week_3)

# function for creating model based off of week 3 opponent
predict_wk3 <- function(team, opponent){
  matchup_hist <- pbp_old |>
    filter((home_team == team & away_team == opponent) | (home_team == opponent & away_team == team))

  if (nrow(matchup_hist) == 0){
    return(cat("No data available for the past 3 years because ", team, " and ", opponent, " have not played each other."))
  }

  team_data <- matchup_hist |>
    filter(posteam == team) |>
    filter(play_type == "pass") |>
    mutate(
    air_yards = ifelse((is.na(air_yards)),0, air_yards),
    yards_after_catch = ifelse((is.na(yards_after_catch)),0, yards_after_catch))

  plot <- ggplot(team_data, aes(x = air_yards, y = yards_after_catch)) +
    geom_point(size = 3) +
    theme_dark() +
      theme(plot.title = element_text(hjust = 0.5)) +
      labs(title = cat(team, " vs. ", opponent)) +
      geom_smooth(method = "lm")

  return(plot)
}

# function for creating model based off of week 3 opponent
predict_all <- function(team){
  matchup_hist <- pbp_old |>
    filter(home_team == team |away_team == team)

  team_data <- matchup_hist |>
    filter(posteam == team) |>
    filter(play_type == "pass") |>
    mutate(
    air_yards = ifelse((is.na(air_yards)),0, air_yards),
    yards_after_catch = ifelse((is.na(yards_after_catch)),0, yards_after_catch))

  plot <- ggplot(team_data, aes(x = air_yards, y = yards_after_catch)) +
    geom_point(size = 3) +
    theme_dark() +
      geom_smooth(method = "lm")

  return(plot)
}

"""## Part 4: Interpretation and Discussion

### Baltimore
Baltimore has not played Dallas since 2020, so this data may not be the most reliable for making adjustments, especially considering how few data points there are.  However, our model would predict more yards after catch for deeper passes, but that trend doesn't stand out just looking at the data.
"""

# Baltimore
plot1 <- predict_wk3(my_teams[1], opponent_week_3[1])
plot2 <- predict_all(my_teams[1])

grid.arrange(plot1, plot2, ncol = 2)

"""### New York Jets
The Jets trend of yards of catch against the Patriots looks to fit their general trend against all opponents.
"""

# Jets
plot1 <- predict_wk3(my_teams[2], opponent_week_3[2])
plot2 <- predict_all(my_teams[2])

grid.arrange(plot1, plot2, ncol = 2)

"""### Jacksonville
The Jaguars trend against Buffalo is very similar to its trend against all teams, but has a slightly lower starting point (x = 0).
"""

# Jacksonville
plot1 <- predict_wk3(my_teams[3], opponent_week_3[3])
plot2 <- predict_all(my_teams[3])

grid.arrange(plot1, plot2, ncol = 2)

"""### Dallas
The graph on the left makes the difference in the trends between Dallas vs. Baltimore and Dallas vs. All Opponents look drasticaly different.  However the graphs have different x and y limits.  The trends are actually very similar.
"""

# Dallas
plot1 <- predict_wk3(my_teams[4], opponent_week_3[4])
plot2 <- predict_all(my_teams[4])

grid.arrange(plot1, plot2, ncol = 2)

"""### Las Vegas
The trend for Las Vegas vs. Carolina is actually slightly higher than for Las Vegas vs. All Opponents.
"""

# Las Vegas
plot1 <- predict_wk3(my_teams[5], opponent_week_3[5])
plot2 <- predict_all(my_teams[5])

grid.arrange(plot1, plot2, ncol = 2)

"""### Rams
The Rams appear to throw a lot of screen passes and it looks like many of them have turned into solid gains for them.  The trend looks very similar against all opponents as it does against the 49ers, however, perhaps more flat.
"""

# Las Angeles Rams
plot1 <- predict_wk3(my_teams[6], opponent_week_3[6])
plot2 <- predict_all(my_teams[6])

grid.arrange(plot1, plot2, ncol = 2)

"""### Carolina
Carolina is the only team that has an upward trend.  That is drastically different from how they perform against all other teams, which would indicate they may be more successful in getting yards after the catch if they throw it longer than if they throw it short.
"""

# Carolina
plot1 <- predict_wk3(my_teams[7], opponent_week_3[7])
plot2 <- predict_all(my_teams[7])

grid.arrange(plot1, plot2, ncol = 2)

"""### Detroit
Detroit's trendline looks fairly similar against Arizona as it does against all opponents, though maybe just a little steeper, indicating that they may not get as many yards after the catch as they would against other opponents.
"""

# Detroit
plot1 <- predict_wk3(my_teams[8], opponent_week_3[8])
plot2 <- predict_all(my_teams[8])

grid.arrange(plot1, plot2, ncol = 2)

